<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-24T00:55:30+00:00</updated><id>http://localhost:4000/</id><title type="html">Nijraj Gelani</title><subtitle>My blog for the stuff I like and the stuff I don't like.
</subtitle><entry><title type="html">Parsing JSON in C using JSMN</title><link href="http://localhost:4000/2017/07/17/parsing-json-in-c-using-jsmn.html" rel="alternate" type="text/html" title="Parsing JSON in C using JSMN" /><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><id>http://localhost:4000/2017/07/17/parsing-json-in-c-using-jsmn</id><content type="html" xml:base="http://localhost:4000/2017/07/17/parsing-json-in-c-using-jsmn.html">&lt;p&gt;I recently came across this small and really useful library, JSMN 
(pronounced jasmine) which is really easy and useful for parsing JSON 
data in C with small but useful API.&lt;/p&gt;

&lt;p&gt;From its &lt;a href=&quot;http://zserge.com/jsmn.html&quot;&gt;website&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;[JSMN is] is designed to be robust (it should work fine even with 
erroneous data), fast (it parses data on the fly and is re-entrant), 
portable (no superfluous dependencies or non-standard C extensions). 
And of course, simplicity is a key feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;As I’ve already said, JSMN is really small. And it is opensource with 
MIT license. So you can basically just drop in the library inside your 
project and use it wherever you want.&lt;/p&gt;

&lt;p&gt;Clone the git repository using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zserge/jsmn.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;or mercurial using&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hg clone http://bitbucket.org/zserge/jsmn jsmn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; to build the library.&lt;/p&gt;

&lt;p&gt;That’s about it. Wherever you want to use the library include &lt;code class=&quot;highlighter-rouge&quot;&gt;jsmn.h&lt;/code&gt; 
and compile with the &lt;code class=&quot;highlighter-rouge&quot;&gt;libjsmn.a&lt;/code&gt; library.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Before doing any parsing, a &lt;code class=&quot;highlighter-rouge&quot;&gt;jsmn_parser&lt;/code&gt; object needs to be created 
and then initialized. Like this :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;jsmn.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;jsmn_parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// creating the object
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// initializing
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// same function can also be used to reset an object
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;jsmn_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can get to actual parsing using the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsmn_parse&lt;/code&gt; function. 
Instead of assigning separate memory space for each token in the JSON 
what JSMN does is create pointers which point to start and end of each
tokens. These tokens are stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;jsmntok_t&lt;/code&gt; structure which is 
defined as below :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jsmntype_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Token type */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* Token start position */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/* Token end position */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;cm&quot;&gt;/* Number of child (nested) tokens */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsmntok_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s pretty straight forward. Now lets use the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsmn_parse&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jsmntok_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// store your JSON data in a character pointer
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsmn_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// n will now contain number of parsed tokens or a negative
// error value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you don’t know the number of tokens beforehand you can pass &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; 
instead of tokens and it will return number of tokens without actually 
storing them so you can allocate memory appropriately.&lt;/p&gt;

&lt;p&gt;If you’re reading input from a stream then you can continuously check 
if return value of &lt;code class=&quot;highlighter-rouge&quot;&gt;jsmn_parse&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;JSMN_ERROR_NOMEM&lt;/code&gt; and if it is then 
reallocate more memory.&lt;/p&gt;

&lt;p&gt;And that’s it. You can traverse through the scanned tokens array and do 
whatever you like with it.&lt;/p&gt;

&lt;p&gt;Mind that JSMN does not perform unescaping on the tokens to UTF-8 
escaped token will remain as it is.&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;You can find more information and example code here :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://alisdair.mcdiarmid.org/jsmn-example/&quot;&gt;http://zserge.com/jsmn.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://alisdair.mcdiarmid.org/jsmn-example/&quot;&gt;https://alisdair.mcdiarmid.org/jsmn-example/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://nijraj-gelani.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name></name></author><category term="c" /><category term="jsmn" /><category term="json" /><category term="parsing" /><summary type="html">I recently came across this small and really useful library, JSMN (pronounced jasmine) which is really easy and useful for parsing JSON data in C with small but useful API.</summary></entry></feed>